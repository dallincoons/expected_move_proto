previous = current_week$breached
count = 1
for (row in 2:nrow(expected_moves)) {
breached = expected_moves[row, "breached"]
if (breached == previous) {
count = count+1
previous = breached
next
}
break
}
count
1:nrow(expected_moves)
expected_moves[1]
expected_moves[1, "breached"]
expected_moves[0, "breached"]
expected_moves[1, "breached"]
expected_moves[2, "breached"]
expected_moves[3, "breached"]
expected_moves[4, "breached"]
get_recent_streak <- function () {
previous = current_week$breached
last_streak_count = 1
for (row in 2:nrow(expected_moves)) {
breached = expected_moves[row, "breached"]
if (breached == previous) {
count = count+1
previous = breached
next
}
break
}
}
get_recent_streak <- function () {
previous = current_week$breached
last_streak_count = 1
for (row in 2:nrow(expected_moves)) {
breached = expected_moves[row, "breached"]
if (breached == previous) {
count = count+1
previous = breached
next
}
break
}
}
get_recent_streak <- function () {
previous = current_week$breached
streak_count = 1
for (row in 2:nrow(expected_moves)) {
breached = expected_moves[row, "breached"]
if (breached == previous) {
streak_count = streak_count+1
previous = breached
next
}
break
}
return(streak_count)
}
get_recent_streak()
?between
get_breach_count -> function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
return(result)
}
get_breach_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
return(result)
}
get_breach_count()
get_breach_count('2019-01-01', '2019-06-01')
get_breach_count('2019-06-01', '2019-08-01')
get_breach_count('2019/06/01', '2019-08-01')
get_breach_count('2019/06/01', '2019-08-01')
get_breach_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
return(tsapply(expected_moves$breached), FUN = sum)
}
get_breach_count('2019/06/01', '2019-08-01')
tsapply(expected_moves$breached), FUN = sum
tsapply(expected_moves$breached), FUN = sum)
tsapply(expected_moves$breached, FUN = sum)
tapply(expected_moves$breached, FUN = sum)
tapply(expected_moves$breached, INDEX=expected_move$breached, FUN = sum)
tapply(expected_moves$open, INDEX=expected_move$breached, FUN = sum)
tapply(expected_move$open, INDEX=expected_move$breached, FUN = sum)
expected_moves
tapply(expected_moves$open, INDEX=expected_moves$breached, FUN = sum)
tapply(expected_moves$breached, INDEX=expected_moves$breached, FUN = sum)
apply(expected_moves$breached, INDEX=expected_moves$breached, FUN = sum)
apply(expected_moves$breached, FUN = sum)
apply(expected_moves$breached, INDEX=expected_moves$breached, FUN = sum)
return(list(breach_count = 1, not_breached_count = 2))
get_breach_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
return(list(breach_count = 1, not_breached_count = 2))
}
get_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
return(list(breach_count = 1, not_breached_count = 2))
}
get_breached_count()
get_breached_count('2019-06-01', '2020-01-01')
expected_moves %>% split(expected_moves$breached)
expected_moves %>% split(expected_moves$breached)$TRUE
expected_moves %>% split(expected_moves$breached)$`TRUE`
`
(expected_moves %>% split(expected_moves$breached))$TRUE
(expected_moves %>% split(expected_moves$breached))$TRUE
(expected_moves %>% split(expected_moves$breached))$TRUE
expected_moves %>% split(expected_moves$breached)
expected_moves %>% split(expected_moves$breached)[1]
split <- expected_moves %>% split(expected_moves$breached)
sapply(split, length)
get_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- expected_moves %>% split(expected_moves$breached)
return(sapply(split, length))
}
expected_moves %>% filter(breached == TRUE) %>% nrow()
expected_moves %>% filter(breached == FALSE) %>% nrow()
get_breach_count('2019/06/01', '2019-08-01')
get_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- expected_moves %>% split(expected_moves$breached)
return(sapply(split, length))
}
get_breached_count('2019-01-01', '2020-02-01')
expected_moves %>% split(expected_moves$breached)
length(expected_moves)
sapply(split, nrow)
get_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- expected_moves %>% split(expected_moves$breached)
return(sapply(split, nrow))
}
get_breached_count
get_breached_count('2019-01-01', '2020-01-01')
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(low < expected_low) | (high > expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
get_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- expected_moves %>% split(expected_moves$breached)
return(sapply(split, nrow))
}
get_recent_streak <- function () {
previous = current_week$breached
streak_count = 1
for (row in 2:nrow(expected_moves)) {
breached = expected_moves[row, "breached"]
if (breached == previous) {
streak_count = streak_count+1
previous = breached
next
}
break
}
return(streak_count)
}
get_recent_streak()
get_breached_count('2019-01-01', '2020-01-01')
expected_moves %>% filter(breached == T)
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
t_breached = case_when(
(low <= expected_low) | (high >= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
)
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
t_breached = case_when(
(low <= expected_low) | (high >= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
)
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
),
t_breached = case_when(
(low <= expected_low) | (high >= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
get_temporarily_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- expected_moves %>% split(expected_moves$t_breached)
return(sapply(split, nrow))
}
get_temporarily_breached_count()
get_temporarily_breached_count('2019-06-01', '2020-01-01')
get_breached_count('2019-06-01', '2020-01-01')
shiny::runApp('ExpectedMove')
runApp('ExpectedMove')
source('./promximity_chart_generator')
source('./promximity_chart_generator.R')
source('./promximity_chart_generator.R')
source('./proximity_chart_generator.R')
runApp('ExpectedMove')
runApp('ExpectedMove')
source('./proximity_chart_generator.R', local = T)
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
setwd("~/Projects/expected_move/ExpectedMove")
runApp()
runApp()
setwd("~/Projects/expected_move")
runApp('ExpectedMove')
expected_moves <- read_csv('../expected_moves.csv') %>% arrange(desc(week_start))
runApp('ExpectedMove')
runApp('ExpectedMove')
pacman::p_load(tidyverse)
expected_moves <- read_csv('./expected_moves.csv') %>% arrange(desc(week_start))
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
),
t_breached = case_when(
(low <= expected_low) | (high >= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
current_week <- expected_moves %>% head(1)
expected_move_total_width = current_week$expected_high-current_week$expected_low
exptected_move_deviation = expected_move_total_width / 2
isOutsideExpectedMove <- function() {
return(current_week$low < current_week$expected_low | current_week$high > current_week$expected_high)
}
getChartLowerBound <- function(current_week) {
if (current_week$low < current_week$expected_low) {
return(current_week$low - (current_week$expected_high-current_week$expected_low)*.05)
}
return(current_week$expected_low - (current_week$expected_high-current_week$expected_low)*.05)
}
getChartUpperBound <- function(current_week) {
if (current_week$high > current_week$expected_high) {
return(current_week$high + (current_week$expected_high-current_week$expected_low)*.05)
}
return(current_week$expected_high + (current_week$expected_high-current_week$expected_low)*.05)
}
getAmountOutsideExpectedMove <- function() {
if (current_week$close < current_week$expected_low) {
return(current_week$expected_low - current_week$close)
}
if (current_week$high > current_week$expected_high) {
return(current_week$close - current_week$expected_high)
}
}
getMessage <- function() {
if (isOutsideExpectedMove()) {
getAmountOutsideExpectedMove()
return(sprintf("Outside the expected move by %s deviations", getAmountOutsideExpectedMove()/expected_move_total_width))
}
}
ggplot() +
ggtitle(getMessage()) +
xlim(0,10) +
ylim(getChartLowerBound(current_week), getChartUpperBound(current_week)) +
geom_hline(yintercept=current_week$expected_high, color="black") +
geom_hline(yintercept=current_week$expected_low, color="black") +
geom_hline(yintercept=current_week$close, color='red') +
ylab("") +
xlab(getMessage()) +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
get_recent_streak <- function () {
previous = current_week$breached
streak_count = 1
for (row in 2:nrow(expected_moves)) {
breached = expected_moves[row, "breached"]
if (breached == previous) {
streak_count = streak_count+1
previous = breached
next
}
break
}
return(streak_count)
}
get_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- expected_moves %>% split(expected_moves$breached)
return(sapply(split, nrow))
}
get_temporarily_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- expected_moves %>% split(expected_moves$t_breached)
return(sapply(split, nrow))
}
get_breached_count('2019-10-01', '2020-01-01')
get_temporarily_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- result %>% split(expected_moves$t_breached)
return(sapply(split, nrow))
}
get_breached_count('2019-10-01', '2020-01-01')
get_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- result %>% split(result$breached)
return(sapply(split, nrow))
}
get_breached_count('2019-10-01', '2020-01-01')
get_breached_count('2019-06-01', '2020-01-01')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
pacman::p_load(tidyverse)
expected_moves <- read_csv('./expected_moves.csv') %>% arrange(desc(week_start))
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
),
t_breached = case_when(
(low <= expected_low && close >= expected_low) | (high >= expected_high && high <= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
current_week <- expected_moves %>% head(1)
expected_move_total_width = current_week$expected_high-current_week$expected_low
exptected_move_deviation = expected_move_total_width / 2
isOutsideExpectedMove <- function() {
return(current_week$low < current_week$expected_low | current_week$high > current_week$expected_high)
}
getChartLowerBound <- function(current_week) {
if (current_week$low < current_week$expected_low) {
return(current_week$low - (current_week$expected_high-current_week$expected_low)*.05)
}
return(current_week$expected_low - (current_week$expected_high-current_week$expected_low)*.05)
}
getChartUpperBound <- function(current_week) {
if (current_week$high > current_week$expected_high) {
return(current_week$high + (current_week$expected_high-current_week$expected_low)*.05)
}
return(current_week$expected_high + (current_week$expected_high-current_week$expected_low)*.05)
}
getAmountOutsideExpectedMove <- function() {
if (current_week$close < current_week$expected_low) {
return(current_week$expected_low - current_week$close)
}
if (current_week$high > current_week$expected_high) {
return(current_week$close - current_week$expected_high)
}
}
getMessage <- function() {
if (isOutsideExpectedMove()) {
getAmountOutsideExpectedMove()
return(sprintf("Outside the expected move by %s deviations", getAmountOutsideExpectedMove()/expected_move_total_width))
}
}
ggplot() +
ggtitle(getMessage()) +
xlim(0,10) +
ylim(getChartLowerBound(current_week), getChartUpperBound(current_week)) +
geom_hline(yintercept=current_week$expected_high, color="black") +
geom_hline(yintercept=current_week$expected_low, color="black") +
geom_hline(yintercept=current_week$close, color='red') +
ylab("") +
xlab(getMessage()) +
theme_minimal() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
get_recent_streak <- function () {
previous = current_week$breached
streak_count = 1
for (row in 2:nrow(expected_moves)) {
breached = expected_moves[row, "breached"]
if (breached == previous) {
streak_count = streak_count+1
previous = breached
next
}
break
}
return(streak_count)
}
get_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- result %>% split(result$breached)
return(sapply(split, nrow))
}
get_temporarily_breached_count <- function (start_date, end_date) {
result <- expected_moves %>%
filter(week_start >= start_date) %>%
filter(week_end <= end_date)
split <- result %>% split(result$t_breached)
return(sapply(split, nrow))
}
runApp('ExpectedMove')
get_temporarily_breached_count('2019-06-01', '2020-01-01')
expected_moves
expected_moves$t_breached
unique(expected_moves$t_breached)
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
),
t_breached = case_when(
(low <= expected_low && close >= expected_low) ~ TRUE,
TRUE ~ FALSE
)
)
unique(expected_moves$t_breached)
unique(expected_moves$t_breached)
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
),
t_breached = case_when(
(low <= expected_low) | (high >= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
expected_moves <- read_csv('./expected_moves.csv') %>% arrange(desc(week_start))
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
),
t_breached = case_when(
(low <= expected_low) | (high >= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
unique(expected_moves$t_breached)
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
),
t_breached = case_when(
(low <= expected_low & close >= expected_low) | (high >= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
unique(expected_moves$t_breached)
expected_moves <- expected_moves %>%
mutate(breached = case_when(
(close <= expected_low) | (close >= expected_high) ~ TRUE,
TRUE ~ FALSE
),
t_breached = case_when(
(low <= expected_low & close >= expected_low) |
(high >= expected_high & high <= expected_high) ~ TRUE,
TRUE ~ FALSE
)
)
unique(expected_moves$t_breached)
runApp('ExpectedMove')
expected_moves
expected_moves$breach %>% table()
expected_moves$breached %>% table()
runApp('ExpectedMove')
runApp('ExpectedMove')
runApp('ExpectedMove')
